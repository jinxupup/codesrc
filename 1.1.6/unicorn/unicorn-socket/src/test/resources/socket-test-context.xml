<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.1.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean id="env"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations"
			value="#{systemProperties['env.files'] ?: 'classpath:/dev/socket-test.properties'}" />
	</bean>

	<context:component-scan base-package="com.jjb.unicorn.socket" />

	<!-- socket server -->
	<bean class="com.jjb.unicorn.socket.SimpleSocketServer">
		<property name="acceptor" ref="acceptor" />
		<property name="ports">
			<array>
				<value>7777</value>
			</array>
		</property>
	</bean>

	<bean id="testAcceptorHelper" class="com.jjb.unicorn.socket.YakNioAcceptorHelper">
		<!-- socket处理过滤器列表，依据从上到下的顺序 -->
		<property name="ioFilters">
			<list>
				<!-- 日志过滤器 -->
				<bean class="org.apache.mina.filter.logging.LoggingFilter">
					<constructor-arg value="com.jjb.unicorn.socket.SocketServer" />
				</bean>
				<!-- 协议编解码过滤器 -->
				<bean class="org.apache.mina.filter.codec.ProtocolCodecFilter">
					<constructor-arg>
						<bean class="com.jjb.unicorn.socket.codec.LVMessageEncoder">
							<property name="filterChain">
								<bean class="com.jjb.unicorn.socket.codec.YakEncodeFilterChain">
									<property name="messageDefinition" ref="msgDef"/>
									<property name="chain">
										<list>
											<bean class="com.jjb.unicorn.socket.test.TestEncodeFilter" />
										</list>
									</property>
								</bean>
							</property>
						</bean>
					</constructor-arg>
					<constructor-arg>
						<bean class="com.jjb.unicorn.socket.codec.LVMessageDecoder">
							<property name="filterChain">
								<bean class="com.jjb.unicorn.socket.codec.YakDecodeFilterChain">
									<property name="messageDefinition" ref="msgDef"/>
									<property name="chain">
										<list>
											<bean class="com.jjb.unicorn.socket.test.TestDecodeFilter" />
										</list>
									</property>
								</bean>
							</property>
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="acceptor" factory-bean="testAcceptorHelper"
		factory-method="getAcceptor">
		<!-- IO处理句柄 -->
		<property name="handler">
			<bean class="com.jjb.unicorn.socket.test.TestIoHandler" />
		</property>
	</bean>

	<bean factory-bean="acceptor" factory-method="getSessionConfig">
		<!-- socket连接超过#{env.idleTime}后认为连接闲置 -->
		<property name="bothIdleTime" value="#{env.idleTime}" />
	</bean>

	<!-- socket client -->
	<bean class="com.jjb.unicorn.socket.PooledSocketClient">
		<property name="pool" ref="testSocketConnectionPool" />
	</bean>

	<!-- commons pool实现的socket连接池 -->
	<bean id="testSocketConnectionPool" class="org.apache.commons.pool.impl.GenericObjectPool">
		<constructor-arg>
			<bean class="com.jjb.unicorn.socket.SocketClientConnectionFactory">
				<!-- socket连接通过connector来创建 -->
				<constructor-arg ref="testConnector" />
			</bean>
		</constructor-arg>
		<!-- 连接池属性 -->
		<property name="maxActive" value="#{env.maxActive}" />
		<property name="maxIdle" value="#{env.maxIdle}" />
		<property name="minIdle" value="#{env.minIdle}" />
	</bean>

	<bean id="testConnectorHelper" class="com.jjb.unicorn.socket.YakNioConnectorHelper">
		<property name="ioFilters">
			<!-- socket处理过滤器列表，依据从上到下的顺序 -->
			<list>
				<!-- 日志过滤器 -->
				<bean class="org.apache.mina.filter.logging.LoggingFilter">
					<constructor-arg value="com.jjb.unicorn.socket.PooledSocketClient" />
				</bean>
				<!-- 协议编解码过滤器 -->
				<bean class="org.apache.mina.filter.codec.ProtocolCodecFilter">
					<constructor-arg>
						<bean class="com.jjb.unicorn.socket.codec.LVMessageEncoder">
							<property name="filterChain">
								<bean class="com.jjb.unicorn.socket.codec.YakEncodeFilterChain">
									<property name="messageDefinition" ref="msgDef"/>
									<property name="chain">
										<list>
											<bean class="com.jjb.unicorn.socket.test.TestEncodeFilter" />
										</list>
									</property>
								</bean>
							</property>
						</bean>
					</constructor-arg>
					<constructor-arg>
						<bean class="com.jjb.unicorn.socket.codec.LVMessageDecoder">
							<property name="filterChain">
								<bean class="com.jjb.unicorn.socket.codec.YakDecodeFilterChain">
									<property name="messageDefinition" ref="msgDef"/>
									<property name="chain">
										<list>
											<bean class="com.jjb.unicorn.socket.test.TestDecodeFilter" />
										</list>
									</property>
								</bean>
							</property>
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="testConnector" factory-bean="testConnectorHelper"
		factory-method="getConnector">
		<!-- socket连接的hostname和port -->
		<property name="defaultRemoteAddress">
			<bean class="java.net.InetSocketAddress">
				<constructor-arg value="#{env.hostName}" />
				<constructor-arg value="#{env.port}" />
			</bean>
		</property>
		<!-- 连接IO处理句柄 -->
		<property name="handler">
			<bean class="com.jjb.unicorn.socket.DuplexLongTermClientIoHandler" />
		</property>
		<!-- 连接超时时间 -->
		<property name="connectTimeoutMillis" value="#{env.connectTimeOutMillis}" />
	</bean>

	<bean factory-bean="testConnector" factory-method="getSessionConfig">
		<!-- socket连接超过#{env.idleTime}后认为连接闲置 -->
		<property name="bothIdleTime" value="#{env.idleTime}" />
	</bean>

	<bean id="msgDef" class="com.jjb.unicorn.socket.definition.MessageDefinitionFactory">
		<property name="messageDef" value="message-def.xml"/>
	</bean>
	
</beans>
