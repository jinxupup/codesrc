package com.jjb.unicorn.socket.codec;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * <p>Description: ASCII和EBCDIC进行转换工具类</p>
 * <p>Company: 上海JYDATA服务有限公司</p>
 * @ClassName: AsciiEbcdicCodecUtil
 * @author LI.H
 * @date 2015年10月12日 下午4:49:43
 * @version 1.0
 */
public class AsciiEbcdicCodecUtil {

	/**
	 * <p>ASCII->EBCDIC映射表</p>
	 */
	private static byte[] AToE = {
		//0_	
		(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x37, (byte) 0x2d, (byte) 0x2e, (byte) 0x2f,
		(byte) 0x16, (byte) 0x05, (byte) 0x25, (byte) 0x0b, (byte) 0x0c, (byte) 0x0d, (byte) 0x0e, (byte) 0x0f,
		//1_
		(byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, (byte) 0x3c, (byte) 0x3d, (byte) 0x32, (byte) 0x26,
		(byte) 0x18, (byte) 0x19, (byte) 0x3f, (byte) 0x27, (byte) 0x1c, (byte) 0x1d, (byte) 0x1e, (byte) 0x1f,
		//2_
		(byte) 0x40, (byte) 0x5a, (byte) 0x7f, (byte) 0x7b, (byte) 0x5b, (byte) 0x6c, (byte) 0x50, (byte) 0x7d,
		(byte) 0x4d, (byte) 0x5d, (byte) 0x5c, (byte) 0x4e, (byte) 0x6b, (byte) 0x60, (byte) 0x4b, (byte) 0x61,
		//3_
		(byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, (byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7,
		(byte) 0xf8, (byte) 0xf9, (byte) 0x7a, (byte) 0x5e, (byte) 0x4c, (byte) 0x7e, (byte) 0x6e, (byte) 0x6f,
		//4_
		(byte) 0x7c, (byte) 0xc1, (byte) 0xc2, (byte) 0xc3, (byte) 0xc4, (byte) 0xc5, (byte) 0xc6, (byte) 0xc7,
		(byte) 0xc8, (byte) 0xc9, (byte) 0xd1, (byte) 0xd2, (byte) 0xd3, (byte) 0xd4, (byte) 0xd5, (byte) 0xd6,
		//5_
		(byte) 0xd7, (byte) 0xd8, (byte) 0xd9, (byte) 0xe2, (byte) 0xe3, (byte) 0xe4, (byte) 0xe5, (byte) 0xe6,
		(byte) 0xe7, (byte) 0xe8, (byte) 0xe9, (byte) 0xad, (byte) 0xe0, (byte) 0xbd, (byte) 0x5f, (byte) 0x6d,
		//6_
		(byte) 0x79, (byte) 0x81, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x85, (byte) 0x86, (byte) 0x87,
		(byte) 0x88, (byte) 0x89, (byte) 0x91, (byte) 0x92, (byte) 0x93, (byte) 0x94, (byte) 0x95, (byte) 0x96,
		//7_
		(byte) 0x97, (byte) 0x98, (byte) 0x99, (byte) 0xa2, (byte) 0xa3, (byte) 0xa4, (byte) 0xa5, (byte) 0xa6,
		(byte) 0xa7, (byte) 0xa8, (byte) 0xa9, (byte) 0xc0, (byte) 0x4f, (byte) 0xd0, (byte) 0xa1, (byte) 0x07,
		//8_
		(byte) 0x04, (byte) 0x06, (byte) 0x08, (byte) 0x09, (byte) 0x0a, (byte) 0x15, (byte) 0x14, (byte) 0x17,
		(byte) 0x1a, (byte) 0x1b, (byte) 0x20, (byte) 0x21, (byte) 0x22, (byte) 0x23, (byte) 0x24, (byte) 0x28,
		//9_
		(byte) 0x29, (byte) 0x2a, (byte) 0x2b, (byte) 0x2c, (byte) 0x30, (byte) 0x31, (byte) 0x33, (byte) 0x34,
		(byte) 0x35, (byte) 0x36, (byte) 0x38, (byte) 0x39, (byte) 0x3a, (byte) 0x3b, (byte) 0x3e, (byte) 0xff,
		//a_
		(byte) 0x41, (byte) 0xaa, (byte) 0x4a, (byte) 0xb1, (byte) 0x9f, (byte) 0xb2, (byte) 0x6a, (byte) 0xb5,
		(byte) 0xbb, (byte) 0xb4, (byte) 0x9a, (byte) 0x8a, (byte) 0xb0, (byte) 0xca, (byte) 0xaf, (byte) 0xbc,
		//b_
		(byte) 0x90, (byte) 0x8f, (byte) 0xea, (byte) 0xfa, (byte) 0xbe, (byte) 0xa0, (byte) 0xb6, (byte) 0xb3,
		(byte) 0x9d, (byte) 0xda, (byte) 0x9b, (byte) 0x8b, (byte) 0xb7, (byte) 0xb8, (byte) 0xb9, (byte) 0xab,
		//c_
		(byte) 0x64, (byte) 0x65, (byte) 0x62, (byte) 0x66, (byte) 0x63, (byte) 0x67, (byte) 0x9e, (byte) 0x68,
		(byte) 0x74, (byte) 0x71, (byte) 0x72, (byte) 0x73, (byte) 0x78, (byte) 0x75, (byte) 0x76, (byte) 0x77,
		//d_
		(byte) 0xac, (byte) 0x69, (byte) 0xed, (byte) 0xee, (byte) 0xeb, (byte) 0xef, (byte) 0xec, (byte) 0xbf,
		(byte) 0x80, (byte) 0xfd, (byte) 0xfe, (byte) 0xfb, (byte) 0xfc, (byte) 0xba, (byte) 0xae, (byte) 0x59,
		//e_
		(byte) 0x44, (byte) 0x45, (byte) 0x42, (byte) 0x46, (byte) 0x43, (byte) 0x47, (byte) 0x9c, (byte) 0x48,
		(byte) 0x54, (byte) 0x51, (byte) 0x52, (byte) 0x53, (byte) 0x58, (byte) 0x55, (byte) 0x56, (byte) 0x57,
		//f_
		(byte) 0x8c, (byte) 0x49, (byte) 0xcd, (byte) 0xce, (byte) 0xcb, (byte) 0xcf, (byte) 0xcc, (byte) 0xe1,
		(byte) 0x70, (byte) 0xdd, (byte) 0xde, (byte) 0xdb, (byte) 0xdc, (byte) 0x8d, (byte) 0x8e, (byte) 0xdf};
	
	/**
	 * <p>EBCDIC->ASCII映射表</p>
	 */
	private static byte[] EToA = {
		//0_
		(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x80, (byte) 0x09, (byte) 0x81, (byte) 0x7f,
		(byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x0b, (byte) 0x0c, (byte) 0x0d, (byte) 0x0e, (byte) 0x0f,
		//1_
		(byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, (byte) 0x86, (byte) 0x85, (byte) 0x08, (byte) 0x87,
		(byte) 0x18, (byte) 0x19, (byte) 0x88, (byte) 0x89, (byte) 0x1c, (byte) 0x1d, (byte) 0x1e, (byte) 0x1f,
		//2_
		(byte) 0x8a, (byte) 0x8b, (byte) 0x8c, (byte) 0x8d, (byte) 0x8e, (byte) 0x0a, (byte) 0x17, (byte) 0x1b,
		(byte) 0x8f, (byte) 0x90, (byte) 0x91, (byte) 0x92, (byte) 0x93, (byte) 0x05, (byte) 0x06, (byte) 0x07,
		//3_
		(byte) 0x94, (byte) 0x95, (byte) 0x16, (byte) 0x96, (byte) 0x97, (byte) 0x98, (byte) 0x99, (byte) 0x04,
		(byte) 0x9a, (byte) 0x9b, (byte) 0x9c, (byte) 0x9d, (byte) 0x14, (byte) 0x15, (byte) 0x9e, (byte) 0x1a,
		//4_
		(byte) 0x20, (byte) 0xa0, (byte) 0xe2, (byte) 0xe4, (byte) 0xe0, (byte) 0xe1, (byte) 0xe3, (byte) 0xe5,
		(byte) 0xe7, (byte) 0xf1, (byte) 0xa2, (byte) 0x2e, (byte) 0x3c, (byte) 0x28, (byte) 0x2b, (byte) 0x7c,
		//5_
		(byte) 0x26, (byte) 0xe9, (byte) 0xea, (byte) 0xeb, (byte) 0xe8, (byte) 0xed, (byte) 0xee, (byte) 0xef,
		(byte) 0xec, (byte) 0xdf, (byte) 0x21, (byte) 0x24, (byte) 0x2a, (byte) 0x29, (byte) 0x3b, (byte) 0x5e,
		//6_
		(byte) 0x2d, (byte) 0x2f, (byte) 0xc2, (byte) 0xc4, (byte) 0xc0, (byte) 0xc1, (byte) 0xc3, (byte) 0xc5,
		(byte) 0xc7, (byte) 0xd1, (byte) 0xa6, (byte) 0x2c, (byte) 0x25, (byte) 0x5f, (byte) 0x3e, (byte) 0x3f,
		//7_
		(byte) 0xf8, (byte) 0xc9, (byte) 0xca, (byte) 0xcb, (byte) 0xc8, (byte) 0xcd, (byte) 0xce, (byte) 0xcf,
		(byte) 0xcc, (byte) 0x60, (byte) 0x3a, (byte) 0x23, (byte) 0x40, (byte) 0x27, (byte) 0x3d, (byte) 0x22,
		//8_
		(byte) 0xd8, (byte) 0x61, (byte) 0x62, (byte) 0x63, (byte) 0x64, (byte) 0x65, (byte) 0x66, (byte) 0x67,
		(byte) 0x68, (byte) 0x69, (byte) 0xab, (byte) 0xbb, (byte) 0xf0, (byte) 0xfd, (byte) 0xfe, (byte) 0xb1,
		//9_
		(byte) 0xb0, (byte) 0x6a, (byte) 0x6b, (byte) 0x6c, (byte) 0x6d, (byte) 0x6e, (byte) 0x6f, (byte) 0x70,
		(byte) 0x71, (byte) 0x72, (byte) 0xaa, (byte) 0xba, (byte) 0xe6, (byte) 0xb8, (byte) 0xc6, (byte) 0xa4,
		//a_
		(byte) 0xb5, (byte) 0x7e, (byte) 0x73, (byte) 0x74, (byte) 0x75, (byte) 0x76, (byte) 0x77, (byte) 0x78,
		(byte) 0x79, (byte) 0x7a, (byte) 0xa1, (byte) 0xbf, (byte) 0xd0, (byte) 0x5b, (byte) 0xde, (byte) 0xae,
		//b_
		(byte) 0xac, (byte) 0xa3, (byte) 0xa5, (byte) 0xb7, (byte) 0xa9, (byte) 0xa7, (byte) 0xb6, (byte) 0xbc,
		(byte) 0xbd, (byte) 0xbe, (byte) 0xdd, (byte) 0xa8, (byte) 0xaf, (byte) 0x5d, (byte) 0xb4, (byte) 0xd7,
		//c_
		(byte) 0x7b, (byte) 0x41, (byte) 0x42, (byte) 0x43, (byte) 0x44, (byte) 0x45, (byte) 0x46, (byte) 0x47,
		(byte) 0x48, (byte) 0x49, (byte) 0xad, (byte) 0xf4, (byte) 0xf6, (byte) 0xf2, (byte) 0xf3, (byte) 0xf5,
		//d_
		(byte) 0x7d, (byte) 0x4a, (byte) 0x4b, (byte) 0x4c, (byte) 0x4d, (byte) 0x4e, (byte) 0x4f, (byte) 0x50,
		(byte) 0x51, (byte) 0x52, (byte) 0xb9, (byte) 0xfb, (byte) 0xfc, (byte) 0xf9, (byte) 0xfa, (byte) 0xff,
		//e_
		(byte) 0x5c, (byte) 0xf7, (byte) 0x53, (byte) 0x54, (byte) 0x55, (byte) 0x56, (byte) 0x57, (byte) 0x58,
		(byte) 0x59, (byte) 0x5a, (byte) 0xb2, (byte) 0xd4, (byte) 0xd6, (byte) 0xd2, (byte) 0xd3, (byte) 0xd5,
		//f_
		(byte) 0x30, (byte) 0x31, (byte) 0x32, (byte) 0x33, (byte) 0x34, (byte) 0x35, (byte) 0x36, (byte) 0x37,
		(byte) 0x38, (byte) 0x39, (byte) 0xb3, (byte) 0xdb, (byte) 0xdc, (byte) 0xd9, (byte) 0xda, (byte) 0x9f};

	/**
	 * <p>字节的ASCII->EBCDIC转换函数</p>
	 */
	public static int ASCIIToEBCDIC(int ascii) {
		return AToE[ascii & 0xff] & 0xff;
	}

	/**
	 * <p>字节的EBCDIC->ASCII转换函数</p>
	 */
	public static int EBCDICToASCII(int ebcdic) {
		return EToA[ebcdic & 0xff] & 0xff;
	}

	/**
	 * <p>字节流的ASCII->EBCDIC转换函数</p>
	 */
	public static byte[] ASCIIToEBCDIC(byte[] ascii) {
		byte[] tobytes = new byte[ascii.length];
		for (int i = 0; i < ascii.length; i++)
			tobytes[i] = (byte) ASCIIToEBCDIC(ascii[i]);
		return tobytes;
	}

	/**
	 * <p>字节流的EBCDIC->ASCII转换函数</p>
	 */
	public static byte[] EBCDICToASCII(byte[] ebcdic) {
		byte[] tobytes = new byte[ebcdic.length];
		for (int i = 0; i < ebcdic.length; i++)
			tobytes[i] = (byte) EBCDICToASCII(ebcdic[i]);
		return tobytes;
	}

	/**
	 * <p>字符串的ASCII->EBCDIC转换函数</p>
	 */
	public static String ASCIIToEBCDIC(String ascii) {
		return new String(ASCIIToEBCDIC(ascii.getBytes()));
	}

	/**
	 * <p>字符串的EBCDIC->ASCII转换函数</p>
	 */
	public static String EBCDICToASCII(String ebcdic) {
		return new String(EBCDICToASCII(ebcdic.getBytes()));
	}

	/**
	 * <p>文件的ASCII->EBCDIC转换函数</p>
	 */
	public static void ASCIIToEBCDIC(String fromfile, String tofile) {
			FileInputStream in = null;
			FileOutputStream out = null;
		try {
			in = new FileInputStream(new File(fromfile));
			out = new FileOutputStream(new File(tofile));
			int tempint, i = 0;
			byte[] tempbytes = new byte[in.available()];
			while ((tempint = in.read()) != -1)
				tempbytes[i++] = (byte) tempint;
			out.write(ASCIIToEBCDIC(tempbytes));
			in.close();
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (null != in) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (null != out) {
				try {
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * <p>文件的EBCDIC->ASCII转换函数</p>
	 */
	public static void EBCDICToASCII(String fromfile, String tofile) {
		FileInputStream in = null;
		FileOutputStream out = null;
		try {
			in = new FileInputStream(new File(fromfile));
			out = new FileOutputStream(new File(tofile));
			int tempint, i = 0;
			byte[] tempbytes = new byte[in.available()];
			while ((tempint = in.read()) != -1)
				tempbytes[i++] = (byte) tempint;
			out.write(EBCDICToASCII(tempbytes));
			in.close();
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (null != in) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (null != out) {
				try {
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

}
